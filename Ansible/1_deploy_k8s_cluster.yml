---
- name: Setup Kubernetes Cluster with Networking
  hosts: all
  become: yes
  vars:
    internal_ip: "10.0.0.16"       # Внутренний IP мастера
    external_ip: "89.169.150.1"    # Внешний IP мастера
    pod_subnet: "10.244.0.0/16"    # Подсеть для подов (используется Calico)
  tasks:
    - name: Ensure system is up to date
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

    - name: Disable SWAP
      shell: swapoff -a

    - name: Disable SWAP in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Ensure /etc/modules-load.d/containerd.conf exists
      file:
        path: /etc/modules-load.d/containerd.conf
        state: touch
        mode: '0644'

    - name: Configure kernel modules for containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter

    - name: Configure sysctl parameters for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl parameters
      command: sysctl --system

    - name: Install necessary networking packages
      apt:
        name:
          - apt-transport-https
        state: present

    - name: Add Docker apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker's APT repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Add Kubernetes apt-key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        state: present

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        update_cache: yes

    - name: Install containerd, kubelet, and kubeadm
      apt:
        name:
          - containerd.io
          - kubelet=1.29.*
          - kubeadm=1.29.*
          - kubectl=1.29.*
        state: present
        allow_unauthenticated: yes
        update_cache: yes

    - name: Configure containerd
      shell: |
        containerd config default | sudo tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    - name: Enable and start containerd service
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes

    - name: Load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present

    - name: Reboot nodes after configuration
      reboot:
        msg: "Rebooting after installing dependencies"
        reboot_timeout: 600

- name: Initialize Kubernetes Master
  hosts: master
  become: yes
  vars:
    internal_ip: "10.0.0.16"
    external_ip: "89.169.150.1"
    pod_subnet: "10.244.0.0/16"
  tasks:
    - name: Reset previous Kubernetes installation
      shell: kubeadm reset -f
      ignore_errors: yes

    - name: Clean up etcd data directory
      file:
        path: /var/lib/etcd
        state: absent
        force: yes

    - name: Create kubeadm-config.yaml for Kubernetes master
      copy:
        dest: /etc/kubernetes/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            podSubnet: "{{ pod_subnet }}"
          apiServer:
            certSANs:
              - "{{ internal_ip }}"
              - "{{ external_ip }}"
              - "kubernetes"
              - "kubernetes.default"
              - "kubernetes.default.svc"

    - name: Initialize the Kubernetes master node
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml --upload-certs
      register: init_result
      ignore_errors: yes

    - name: Check if initialization was successful
      fail:
        msg: "Kubeadm initialization failed. Check /root/kubeadm-init.log for details."
      when: init_result.rc != 0

    - name: Create .kube directory for the user
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to admin user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: '0644'

    - name: Ensure KUBECONFIG is set for subsequent tasks
      shell: |
        echo 'export KUBECONFIG=/home/{{ ansible_user }}/.kube/config' >> /home/{{ ansible_user }}/.bashrc
      args:
        executable: /bin/bash

    - name: Wait for the API server to be ready
      shell: |
        KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get pods -n kube-system | grep kube-apiserver | grep Running
      retries: 10
      delay: 30
      register: api_ready
      until: api_ready.rc == 0

    - name: Apply Calico network plugin
      shell: |
        KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml --validate=false
      register: calico_applied
      retries: 3
      delay: 30
      until: calico_applied.rc == 0

    - name: Restart kubelet to apply network configuration
      systemd:
        name: kubelet
        state: restarted

    - name: Wait for Calico Pods to be Ready
      shell: |
        KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl rollout status daemonset/calico-node -n kube-system
      retries: 5
      delay: 30
      when: calico_applied is changed

    - name: Retrieve kubeadm join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to host vars
      set_fact:
        kubeadm_join_command: "{{ join_command.stdout }}"

- name: Join Kubernetes Worker Nodes
  hosts: workers
  become: yes
  vars:
    kubeadm_join_command: "{{ hostvars['master']['kubeadm_join_command'] }}"
  tasks:
    - name: Join worker to Kubernetes cluster
      shell: "{{ kubeadm_join_command }} --ignore-preflight-errors=all"
      when: kubeadm_join_command is defined

- name: Display Cluster State
  hosts: master
  become: yes
  tasks:
    - name: Get Nodes Status
      shell: KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get nodes
      register: nodes_output

    - name: Display Nodes Status
      debug:
        var: nodes_output.stdout

    - name: Get Calico Pods Status
      shell: |
        KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get pods -n kube-system | grep calico
      register: calico_pods_output

    - name: Display Calico Pods Status
      debug:
        var: calico_pods_output.stdout

- name: Setup Monitoring Stack on Monitoring Servers
  hosts: srv_monitoring
  become: yes
  tasks:
    - name: Ensure system is up to date
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

    - name: Install necessary packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m`"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        force: yes

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create directory for monitoring stack
      file:
        path: /opt/monitoring
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy docker-compose.yml for monitoring stack
      copy:
        dest: /opt/monitoring/docker-compose.yml
        content: |
          version: '3.7'
          services:
            prometheus:
              image: prom/prometheus:latest
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
              ports:
                - "9090:9090"

            grafana:
              image: grafana/grafana:latest
              ports:
                - "3000:3000"
              volumes:
                - grafana-storage:/var/lib/grafana
              depends_on:
                - prometheus

            loki:
              image: grafana/loki:2.9.0
              ports:
                - "3100:3100"
              command: -config.file=/etc/loki/local-config.yaml
              volumes:
                - ./loki-config.yaml:/etc/loki/local-config.yaml
                - ./loki-data:/loki

            promtail:
              image: grafana/promtail:2.9.0
              volumes:
                - /var/log:/var/log
                - ./promtail-config.yaml:/etc/promtail/config.yml
              command: -config.file=/etc/promtail/config.yml
              depends_on:
                - loki

          volumes:
            grafana-storage:

    - name: Copy Prometheus configuration
      copy:
        dest: /opt/monitoring/prometheus.yml
        content: |
          global:
            scrape_interval: 15s

          scrape_configs:
            - job_name: 'node_exporter_srv'
              static_configs:
                - targets: ['localhost:9100']

            - job_name: 'node_exporter_cluster'
              static_configs:
                - targets: ['89.169.133.236:9100']  # Замените на IP вашего кластера Kubernetes

    - name: Copy Loki configuration
      copy:
        dest: /opt/monitoring/loki-config.yaml
        content: |
          auth_enabled: false

          server:
            http_listen_port: 3100
            log_level: info

          ingester:
            lifecycler:
              ring:
                kvstore:
                  store: inmemory
                replication_factor: 1

          schema_config:
            configs:
              - from: 2020-10-24
                store: boltdb
                object_store: filesystem
                schema: v11
                index:
                  prefix: index_
                  period: 168h

          storage_config:
            boltdb:
              directory: /loki/index

            filesystem:
              directory: /loki/chunks

          limits_config:
            enforce_metric_name: false

          chunk_store_config:
            max_look_back_period: 0s

          table_manager:
            retention_deletes_enabled: false

    - name: Copy Promtail configuration
      copy:
        dest: /opt/monitoring/promtail-config.yaml
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /tmp/positions.yaml

          clients:
            - url: http://loki:3100/loki/api/v1/push

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*.log

    - name: Create directories for Loki data
      file:
        path: /opt/monitoring/loki-data
        state: directory
        owner: 10001
        group: 10001
        mode: '0755'

    - name: Change ownership of Loki data directory
      file:
        path: /opt/monitoring/loki-data
        owner: 10001
        group: 10001
        recurse: yes

    - name: Start monitoring stack using Docker Compose
      shell: docker-compose up -d
      args:
        chdir: /opt/monitoring

    - name: Install Node Exporter
      shell: |
        cd /usr/local/bin
        wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
        tar xvfz node_exporter-1.6.1.linux-amd64.tar.gz
        mv node_exporter-1.6.1.linux-amd64/node_exporter .
        rm -rf node_exporter-1.6.1.linux-amd64*
      args:
        creates: /usr/local/bin/node_exporter

    - name: Create systemd service for Node Exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=nobody
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=default.target
      notify:
        - Restart Node Exporter

    - name: Enable and start Node Exporter
      systemd:
        name: node_exporter
        state: started
        enabled: yes

  handlers:
    - name: Restart Node Exporter
      systemd:
        name: node_exporter
        state: restarted

